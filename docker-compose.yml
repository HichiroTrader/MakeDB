version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    container_name: rithmic_db
    environment:
      POSTGRES_DB: ${DB_NAME:-rithmic_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-securepassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"  # Only for development, remove in production
    networks:
      - rithmic_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-rithmic_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for inter-service communication
  redis:
    image: redis:7-alpine
    container_name: rithmic_redis
    ports:
      - "6379:6379"  # Only for development, remove in production
    networks:
      - rithmic_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Collector Service
  collector:
    build: .
    container_name: rithmic_collector
    command: python collector.py
    environment:
      # Database configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rithmic_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-securepassword}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Rithmic credentials
      RITHMIC_USER: ${RITHMIC_USER}
      RITHMIC_PASSWORD: ${RITHMIC_PASSWORD}
      RITHMIC_SYSTEM_NAME: ${RITHMIC_SYSTEM_NAME:-Rithmic Paper Trading}
      RITHMIC_APP_NAME: ${RITHMIC_APP_NAME:-RithmicDataCollector}
      RITHMIC_APP_VERSION: ${RITHMIC_APP_VERSION:-1.0.0}
      RITHMIC_URL: ${RITHMIC_URL:-wss://rituz00100.rithmic.com:443}
      
      # Symbol configuration
      SYMBOLS: ${SYMBOLS:-ESZ23,CLZ23}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./config.json:/app/config.json:ro
      - ./credentials:/app/credentials:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rithmic_network
    restart: unless-stopped

  # Flask API Service
  api:
    build: .
    container_name: rithmic_api
    command: python api.py
    environment:
      # Database configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rithmic_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-securepassword}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Flask configuration
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-False}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "5000:5000"  # Only for development, remove in production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rithmic_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rithmic_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Optional SSL certificates
    depends_on:
      api:
        condition: service_healthy
    networks:
      - rithmic_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  rithmic_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16