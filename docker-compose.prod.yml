version: '3.8'

# Production Docker Compose configuration
# Use this for production deployments with enhanced security

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    container_name: rithmic_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-rithmic_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    # Remove port exposure for security
    # ports:
    #   - "5432:5432"
    networks:
      - rithmic_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-rithmic_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for inter-service communication
  redis:
    image: redis:7-alpine
    container_name: rithmic_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword} --maxmemory 256mb --maxmemory-policy allkeys-lru
    # Remove port exposure for security
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - rithmic_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Data Collector Service
  collector:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: rithmic_collector_prod
    command: python collector.py
    environment:
      # Database configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rithmic_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-defaultpassword}
      
      # Rithmic credentials
      RITHMIC_USER: ${RITHMIC_USER}
      RITHMIC_PASSWORD: ${RITHMIC_PASSWORD}
      RITHMIC_SYSTEM_NAME: ${RITHMIC_SYSTEM_NAME:-Rithmic Paper Trading}
      RITHMIC_APP_NAME: ${RITHMIC_APP_NAME:-RithmicDataCollector}
      RITHMIC_APP_VERSION: ${RITHMIC_APP_VERSION:-1.0.0}
      RITHMIC_URL: ${RITHMIC_URL:-wss://rituz00100.rithmic.com:443}
      
      # Symbol configuration
      SYMBOLS: ${SYMBOLS:-ESZ23,CLZ23}
      
      # Production settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONUNBUFFERED: 1
      TZ: ${TIMEZONE:-UTC}
    volumes:
      - ./config.json:/app/config.json:ro
      - ./credentials:/app/credentials:ro
      - collector_logs_prod:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rithmic_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Flask API Service
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: rithmic_api_prod
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --worker-class gevent --worker-connections 1000 --timeout 30 --keepalive 2 --max-requests 1000 --max-requests-jitter 100 api:app
    environment:
      # Database configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rithmic_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-defaultpassword}
      
      # Flask configuration
      FLASK_ENV: production
      FLASK_DEBUG: False
      SECRET_KEY: ${SECRET_KEY}
      
      # Production settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONUNBUFFERED: 1
      TZ: ${TIMEZONE:-UTC}
    # Remove port exposure for security (use NGINX)
    # ports:
    #   - "5000:5000"
    volumes:
      - api_logs_prod:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rithmic_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rithmic_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
      - nginx_cache_prod:/var/cache/nginx
    depends_on:
      api:
        condition: service_healthy
    networks:
      - rithmic_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Log aggregation service (optional)
  logrotate:
    image: alpine:latest
    container_name: rithmic_logrotate_prod
    command: |
      sh -c '
        apk add --no-cache logrotate
        echo "0 2 * * * /usr/sbin/logrotate /etc/logrotate.conf" | crontab -
        crond -f
      '
    volumes:
      - ./logrotate.conf:/etc/logrotate.conf:ro
      - collector_logs_prod:/var/log/collector
      - api_logs_prod:/var/log/api
      - nginx_logs_prod:/var/log/nginx
    networks:
      - rithmic_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  collector_logs_prod:
    driver: local
  api_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local
  nginx_cache_prod:
    driver: local

networks:
  rithmic_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: rithmic_prod